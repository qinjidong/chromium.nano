// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Mojo module supporting the Certificate Manager V2 WebUI.
module certificate_manager_v2.mojom;

// Summary information about a certificate.
struct SummaryCertInfo {
  string sha256hash_hex;
  // Human-readable name for the certificate. May be empty.
  string display_name;
};

// Factory ensures that the Page and PageHandler interfaces are always created
// together without requiring an initialization call from the WebUI to the
// handler.
interface CertificateManagerPageHandlerFactory {
  // Create both the CertificateManagerPage and CertificateManagerPageHandler
  // at the same time.
  CreateCertificateManagerPageHandler(
    pending_remote<CertificateManagerPage> page,
    pending_receiver<CertificateManagerPageHandler> handler);
};

enum CertificateSource {
  // Note that the enum is defined to start from 1 so that if there is a bug in
  // the typescript or html and it "helpfully" gets silently converted to a 0,
  // it will cause a mojo message validation error rather than silently using
  // the first source.

  // Trusted certs from the Chrome Root Store.
  kChromeRootStore=1,

  // Client certificates from the platform store.
  kPlatformClientCert,

  // Enterprise provisioned client certificates. Only enabled on platforms
  // where that feature is available.
  [EnableIf=enable_provisioned_client_certs]
  kProvisionedClientCert,
};

struct CertPolicyInfo {
  // If true, user-added certs are imported from the system
  bool include_system_trust_store;

  // If true, an enterprise policy controls whether user-added certs are
  // imported from the system.
  bool is_include_system_trust_store_managed;
};

// Calls from TS -> C++  (Renderer -> Browser).
interface CertificateManagerPageHandler {
  // Get the list of certificates from a given source.
  GetCertificates(CertificateSource source) => (array<SummaryCertInfo> certs);

  // Get information about enterprise policies impacting certificate
  // verification.
  GetPolicyInformation() => (CertPolicyInfo policy_info);

  // Open the view certificate dialog for a specific certificate.
  ViewCertificate(CertificateSource source, string sha256_hash_hex);

  // Export all the certificates from a given source.
  ExportCertificates(CertificateSource source);

  // Show the platform's native certificate management UI.
  [EnableIf=native_cert_management]
  ShowNativeManageCertificates();

};

// Calls from C++ -> TS (Browser -> Renderer).
interface CertificateManagerPage {
  // TODO(crbug.com/40928765): Currently empty, add methods as needed.
};
